{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"04_mobility_analytics","provenance":[],"mount_file_id":"1VFWeGz1cIerQxZBIKDAXvNAl7kirPERd","authorship_tag":"ABX9TyPPTOKBj6Vi4fwvNYGzK+Nz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"pRDAdEJ-hart","colab_type":"text"},"source":["# DATA IMPORTING"]},{"cell_type":"code","metadata":{"id":"VGUmK7IkO8hj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"a854618d-6143-4aaf-e760-a88af895cf65","executionInfo":{"status":"ok","timestamp":1589738503939,"user_tz":-330,"elapsed":1616,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","import scipy\n","from scipy import stats\n","from sklearn import preprocessing as prep"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Xx8zsbCqPlsa","colab_type":"code","outputId":"49511e9a-292c-4a16-b8b1-3f9203fd3c56","executionInfo":{"status":"ok","timestamp":1589738507174,"user_tz":-330,"elapsed":4781,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["train = pd.read_csv('drive/My Drive/Colab Notebooks/proj_4 - mobility_analytics/train.csv')\n","test = pd.read_csv('drive/My Drive/Colab Notebooks/proj_4 - mobility_analytics/test.csv')\n","sample = pd.read_csv('drive/My Drive/Colab Notebooks/proj_4 - mobility_analytics/sample_submission.csv')\n","\n","print('Reading sample file, train and test dataset done!')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Reading sample file, train and test dataset done!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nGr-ZxLuQIfn","colab_type":"code","outputId":"b054fe2f-908e-4b0c-fe26-8a6ad6a646a2","executionInfo":{"status":"ok","timestamp":1589738507177,"user_tz":-330,"elapsed":4749,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print('Train data shape: ', train.shape,\n","      '\\nTest data shape:  ', test.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Train data shape:  (131662, 14) \n","Test data shape:   (87395, 13)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RitTlylhQNTm","colab_type":"text"},"source":["# DATA PREPROCESSING"]},{"cell_type":"code","metadata":{"id":"PXKd_QM1QyUZ","colab_type":"code","colab":{}},"source":["trainID = train['Trip_ID']\n","testID = test['Trip_ID']\n","\n","train.drop('Trip_ID', axis=1, inplace=True)\n","test.drop('Trip_ID', axis=1, inplace=True)\n","\n","target = list(train.columns)[-1]\n","\n","numfeat = list(train.select_dtypes(include=np.number))\n","catfeat = list(train.select_dtypes(exclude=np.number))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XoCDpFT8VH58","colab_type":"code","outputId":"4287c9fd-6616-4c18-b80d-727862f6508f","executionInfo":{"status":"ok","timestamp":1589738507179,"user_tz":-330,"elapsed":4672,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["sns.distplot(train[target], kde=False)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7d55b9e128>"]},"metadata":{"tags":[]},"execution_count":6},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"p3aEwm9NblRW","colab_type":"code","colab":{}},"source":["train_labels = train[target]\n","\n","df = pd.concat([train.drop(target,axis=1),test]).reset_index(drop=True)\n","\n","numfeat=numfeat[:-1]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0egVlz3yc92m","colab_type":"code","outputId":"56928f1d-6391-4d04-b12a-cd645c16b267","executionInfo":{"status":"ok","timestamp":1589738507181,"user_tz":-330,"elapsed":4563,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["df.shape"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(219057, 12)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"73pX3W90c_on","colab_type":"code","outputId":"6ce14220-5a21-4214-80b0-713cea4a40b0","executionInfo":{"status":"ok","timestamp":1589738508009,"user_tz":-330,"elapsed":5345,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":238}},"source":["df.isnull().sum()/df.shape[0]*100"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Trip_Distance                   0.000000\n","Type_of_Cab                    15.232565\n","Customer_Since_Months           4.512981\n","Life_Style_Index               15.301953\n","Confidence_Life_Style_Index    15.301953\n","Destination_Type                0.000000\n","Customer_Rating                 0.000000\n","Cancellation_Last_1Month        0.000000\n","Var1                           53.784631\n","Var2                            0.000000\n","Var3                            0.000000\n","Gender                          0.000000\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"pYWJOo-6dYA3","colab_type":"code","outputId":"1244a225-6253-4f95-ffd9-77c18bee3c91","executionInfo":{"status":"ok","timestamp":1589738508011,"user_tz":-330,"elapsed":5306,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(numfeat, '\\n', catfeat)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["['Trip_Distance', 'Customer_Since_Months', 'Life_Style_Index', 'Customer_Rating', 'Cancellation_Last_1Month', 'Var1', 'Var2', 'Var3'] \n"," ['Type_of_Cab', 'Confidence_Life_Style_Index', 'Destination_Type', 'Gender']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YnpH8f56eaLf","colab_type":"code","outputId":"664c95b9-648f-4151-bca1-67e9e35814d3","executionInfo":{"status":"ok","timestamp":1589738508013,"user_tz":-330,"elapsed":5290,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["df.describe()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Trip_Distance</th>\n","      <th>Customer_Since_Months</th>\n","      <th>Life_Style_Index</th>\n","      <th>Customer_Rating</th>\n","      <th>Cancellation_Last_1Month</th>\n","      <th>Var1</th>\n","      <th>Var2</th>\n","      <th>Var3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>219057.000000</td>\n","      <td>209171.000000</td>\n","      <td>185537.000000</td>\n","      <td>219057.000000</td>\n","      <td>219057.000000</td>\n","      <td>101238.000000</td>\n","      <td>219057.000000</td>\n","      <td>219057.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>44.158725</td>\n","      <td>6.006048</td>\n","      <td>2.802594</td>\n","      <td>2.848632</td>\n","      <td>0.782915</td>\n","      <td>64.095972</td>\n","      <td>51.186586</td>\n","      <td>75.065777</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>25.507368</td>\n","      <td>3.626891</td>\n","      <td>0.226323</td>\n","      <td>0.981100</td>\n","      <td>1.036244</td>\n","      <td>21.747037</td>\n","      <td>4.974497</td>\n","      <td>11.580112</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.310000</td>\n","      <td>0.000000</td>\n","      <td>1.317850</td>\n","      <td>0.001250</td>\n","      <td>0.000000</td>\n","      <td>30.000000</td>\n","      <td>40.000000</td>\n","      <td>52.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>24.560000</td>\n","      <td>3.000000</td>\n","      <td>2.654620</td>\n","      <td>2.152500</td>\n","      <td>0.000000</td>\n","      <td>46.000000</td>\n","      <td>48.000000</td>\n","      <td>67.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>38.140000</td>\n","      <td>6.000000</td>\n","      <td>2.798280</td>\n","      <td>2.895000</td>\n","      <td>0.000000</td>\n","      <td>61.000000</td>\n","      <td>50.000000</td>\n","      <td>74.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>60.720000</td>\n","      <td>10.000000</td>\n","      <td>2.947650</td>\n","      <td>3.581250</td>\n","      <td>1.000000</td>\n","      <td>79.000000</td>\n","      <td>54.000000</td>\n","      <td>82.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>109.230000</td>\n","      <td>10.000000</td>\n","      <td>4.875110</td>\n","      <td>5.000000</td>\n","      <td>8.000000</td>\n","      <td>210.000000</td>\n","      <td>124.000000</td>\n","      <td>206.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       Trip_Distance  Customer_Since_Months  ...           Var2           Var3\n","count  219057.000000          209171.000000  ...  219057.000000  219057.000000\n","mean       44.158725               6.006048  ...      51.186586      75.065777\n","std        25.507368               3.626891  ...       4.974497      11.580112\n","min         0.310000               0.000000  ...      40.000000      52.000000\n","25%        24.560000               3.000000  ...      48.000000      67.000000\n","50%        38.140000               6.000000  ...      50.000000      74.000000\n","75%        60.720000              10.000000  ...      54.000000      82.000000\n","max       109.230000              10.000000  ...     124.000000     206.000000\n","\n","[8 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"hU_Q8l8-f2lg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"5ca7130b-a532-41bf-a17c-74c1b876a6bf","executionInfo":{"status":"ok","timestamp":1589738508014,"user_tz":-330,"elapsed":5268,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["df['Customer_Since_Months'].median()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6.0"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"BWbFrfGydDBi","colab_type":"code","colab":{}},"source":["## CATEGORICAL\n","df['Type_of_Cab'].fillna(df['Type_of_Cab'].mode()[0], inplace=True)   \n","df['Confidence_Life_Style_Index'].fillna(df['Confidence_Life_Style_Index'].mode()[0], inplace=True)\n","\n","## NUMERICAL\n","df['Customer_Since_Months'].fillna(df['Customer_Since_Months'].median(), inplace=True)\n","df['Life_Style_Index'].fillna(df['Life_Style_Index'].median(), inplace=True)\n","df['Var1'].fillna(df['Var1'].median(), inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8vQGQ5pSRS_M","colab_type":"code","colab":{}},"source":["def get_range(df):\n","  \"\"\" Returns the range of numerical dataset values\"\"\"\n","  return df[numfeat].max() - df[numfeat].min()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"azPma8pP772U","colab_type":"code","outputId":"06e3fbe0-ebf2-4874-924a-94bb442fdb56","executionInfo":{"status":"ok","timestamp":1589738508018,"user_tz":-330,"elapsed":5215,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["sns.distplot(df[numfeat[1]], kde=False)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7d555dae80>"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"xHOeGl40hVuU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"d3cc02e0-1bf5-4f8d-b7dd-b58e8fbae042","executionInfo":{"status":"ok","timestamp":1589738509075,"user_tz":-330,"elapsed":6255,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["sns.distplot(np.log1p(df[numfeat[1]]), kde=False)"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7d54268e48>"]},"metadata":{"tags":[]},"execution_count":16},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"qdwn6Ru-i7gd","colab_type":"code","colab":{}},"source":["df[numfeat[1]] = np.log1p(df[numfeat[1]])\n","df[numfeat[4]] = np.log1p(df[numfeat[4]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eB6GXTqxAiMi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"outputId":"a9ee81ff-8d99-4dbd-b86b-1d5c624e8eed","executionInfo":{"status":"ok","timestamp":1589738512379,"user_tz":-330,"elapsed":9325,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["for col in list(df.describe().columns):\n","  print(col)\n","  df[col], _ = stats.yeojohnson(df[col])"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Trip_Distance\n","Customer_Since_Months\n","Life_Style_Index\n","Customer_Rating\n","Cancellation_Last_1Month\n","Var1\n","Var2\n","Var3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SP_AluAhil2_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"e41b588b-20c7-4e29-d3ba-7bc513f822ce","executionInfo":{"status":"ok","timestamp":1589738512381,"user_tz":-330,"elapsed":9310,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["get_range(df)"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Trip_Distance               12.318112\n","Customer_Since_Months        8.931848\n","Life_Style_Index             1.305596\n","Customer_Rating              6.340491\n","Cancellation_Last_1Month     0.660649\n","Var1                         2.797973\n","Var2                         0.000013\n","Var3                         0.014512\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"-H8FhJr1nYX-","colab_type":"code","colab":{}},"source":["min_max_scaler = prep.MinMaxScaler()\n","df[numfeat] = min_max_scaler.fit_transform(df[numfeat])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RdKPhMwBnX9e","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"38f40c0f-2514-42ba-c19c-62fda97842fc","executionInfo":{"status":"ok","timestamp":1589738513622,"user_tz":-330,"elapsed":10516,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["get_range(df)"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Trip_Distance               1.0\n","Customer_Since_Months       1.0\n","Life_Style_Index            1.0\n","Customer_Rating             1.0\n","Cancellation_Last_1Month    1.0\n","Var1                        1.0\n","Var2                        1.0\n","Var3                        1.0\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"iMbYYoduUR6x","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"28d02de8-e1e2-4c6c-88cd-6a2ab9cedce2","executionInfo":{"status":"ok","timestamp":1589738513623,"user_tz":-330,"elapsed":10476,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["df.shape"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(219057, 12)"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"N9dD1yl2mnNX","colab_type":"code","colab":{}},"source":["df1 = pd.get_dummies(df, columns=catfeat)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PornkKWFnpk6","colab_type":"code","outputId":"ee7229b1-987e-4269-f43b-4a2aed3a2d5c","executionInfo":{"status":"ok","timestamp":1589738513626,"user_tz":-330,"elapsed":10441,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["df1.shape"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(219057, 32)"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"R6IkzOSJl_oi","colab_type":"code","colab":{}},"source":["df1['Aggr_Var'] = np.sqrt(df['Var1']**2 + df['Var2']**2 + df['Var3']**2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fMiOiYZZWkBN","colab_type":"text"},"source":["# MODEL FITTING"]},{"cell_type":"code","metadata":{"id":"AIKfChCKWqTK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"3b203bdc-f594-470b-c48a-d09cc4ca68cb","executionInfo":{"status":"ok","timestamp":1589738518764,"user_tz":-330,"elapsed":2985,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["from keras.utils import np_utils\n","from sklearn.preprocessing import LabelEncoder\n","\n","X = df1.iloc[:len(train_labels),:]\n","X1 = X.iloc[:30000,:]\n","\n","y = train_labels\n","y1 = y[:30000]\n","\n","encoded_y = LabelEncoder().fit_transform(y)\n","dummy_y = np_utils.to_categorical(encoded_y)\n","\n","X_test = df1.iloc[len(train_labels):,:]"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"xa2F4g2gqNBq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"outputId":"11cc9745-2be4-441b-b773-473845754205","executionInfo":{"status":"ok","timestamp":1589738355483,"user_tz":-330,"elapsed":1390,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["dummy_y"],"execution_count":151,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1., 0.],\n","       [0., 1., 0.],\n","       [0., 1., 0.],\n","       ...,\n","       [0., 1., 0.],\n","       [0., 1., 0.],\n","       [1., 0., 0.]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":151}]},{"cell_type":"code","metadata":{"id":"mfLORqGGYUrP","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import cross_val_score\n","from sklearn import tree\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn import svm"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m5oayQUhYh-o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"29411675-6eec-4a8a-d8cb-483b1a6a3dd6","executionInfo":{"status":"ok","timestamp":1589735106854,"user_tz":-330,"elapsed":3519,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["dtree = tree.DecisionTreeClassifier(max_depth=50)\n","dtree_model = dtree.fit(X1,y1)\n","\n","scores_dtree = cross_val_score(dtree_model, X1, y1, cv=5)\n","\n","print(scores_dtree.mean())"],"execution_count":76,"outputs":[{"output_type":"stream","text":["0.5537666666666666\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kv1VAe3jY3fG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"0a6444cd-9a49-4321-e98f-c108eb9726b7","executionInfo":{"status":"ok","timestamp":1589735151320,"user_tz":-330,"elapsed":35482,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["rforest = RandomForestClassifier(n_estimators=90,criterion='entropy',max_depth=40, n_estimators = )\n","rforest_model = rforest.fit(X1,y1)\n","\n","scores_rforest = cross_val_score(rforest_model,X1,y1,cv=5)\n","\n","print(scores_rforest.mean())"],"execution_count":77,"outputs":[{"output_type":"stream","text":["0.6769333333333333\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TsxiDjN2ZcMp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"41d4d47b-bcb1-44b3-999f-a280d4393672","executionInfo":{"status":"ok","timestamp":1589735332472,"user_tz":-330,"elapsed":177005,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["xgb = XGBClassifier(max_depth=40,learning_rate=0.1,n_estimators=90)\n","xgb_model = xgb.fit(X1,y1)\n","\n","scores_xgb = cross_val_score(xgb_model,X1,y1,cv=2)\n","\n","print(scores_xgb.mean())"],"execution_count":78,"outputs":[{"output_type":"stream","text":["0.6632666666666667\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mHAkx9tB2Awx","colab_type":"code","colab":{}},"source":["svm_algo = svm.SVC(C=1.0, kernel='rbf')\n","svm_model = svm_algo.fit(X,y)\n","\n","scores_svm = cross_val_score(svm_model,X,y,cv=2)\n","\n","print(scores_svm.mean())"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6v4v-iggvY1h","colab_type":"text"},"source":["#### NEURAL NETWORK"]},{"cell_type":"code","metadata":{"id":"tXsV6PGkvbDh","colab_type":"code","colab":{}},"source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.wrappers.scikit_learn import KerasClassifier"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"53XxfgwbwHx_","colab_type":"code","colab":{}},"source":["model = Sequential()\n","model.add(Dense(12, input_dim=33 ,activation='relu'))\n","model.add(Dense(24, activation='relu'))\n","model.add(Dense(36, activation='relu'))\n","model.add(Dense(24, activation='relu'))\n","model.add(Dense(12, activation='relu'))\n","model.add(Dense(3, activation='softmax'))\n","\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","model.fit(X,dummy_y,epochs=500,batch_size=128)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fXf5inmPlawH","colab_type":"text"},"source":["##### HYPERPARAMETER TUNING for NEURAL NETWORK"]},{"cell_type":"code","metadata":{"id":"9F8u99W5laSe","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","from tensorflow import keras\n","\n","import IPython"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HeQSKjObmLOo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"8c5f2006-abde-4327-8884-477697b90600","executionInfo":{"status":"ok","timestamp":1589738548825,"user_tz":-330,"elapsed":8532,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["!pip install -q -U keras-tuner\n","import kerastuner as kt"],"execution_count":31,"outputs":[{"output_type":"stream","text":["\u001b[?25l\r\u001b[K     |██████                          | 10kB 18.0MB/s eta 0:00:01\r\u001b[K     |████████████                    | 20kB 777kB/s eta 0:00:01\r\u001b[K     |██████████████████              | 30kB 1.2MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 40kB 798kB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 51kB 991kB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 61kB 1.0MB/s \n","\u001b[?25h  Building wheel for keras-tuner (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for terminaltables (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VEC9r8GZmLLG","colab_type":"code","colab":{}},"source":["def model_builder(hp):\n","  model = Sequential()\n","  model.add(Dense(12, input_dim=33 ,activation='relu'))\n","  # Tune the number of units in the first Dense layer\n","  # Choose an optimal value between 32-512\n","  model.add(Dense(24, activation = 'relu'))\n","  model.add(Dense(3,activation='softmax'))\n","\n","  # Tune the learning rate for the optimizer \n","  # Choose an optimal value from 0.01, 0.001, or 0.0001\n","  # hp_learning_rate = hp.Choice('learning_rate', values = [1e-2, 1e-3, 1e-4]) \n","  \n","  # model.compile(optimizer = keras.optimizers.Adam(learning_rate = hp_learning_rate),\n","  #               loss = keras.losses.CategoricalCrossentropy(from_logits = True), \n","  #               metrics = ['accuracy'])\n","  \n","  model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","  return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"k8VVJJ9FmLJw","colab_type":"code","colab":{}},"source":["model = KerasClassifier(build_fn=model_builder,epochs=200,batch_size=256,verbose=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AA2d9oXV3GtK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":765},"outputId":"747688f9-d5c4-4ada-dcbc-718617ade754","executionInfo":{"status":"error","timestamp":1589739921672,"user_tz":-330,"elapsed":4935,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["from sklearn.model_selection import GridSearchCV\n","\n","acti = [{'activation': ['softmax', 'softplus', 'softsign', 'relu', 'tanh', 'sigmoid', 'hard_sigmoid', 'linear']}]\n","\n","grid = GridSearchCV(estimator=model, param_grid=acti, n_jobs=-1, cv=3)\n","grid_result = grid.fit(X, y)"],"execution_count":53,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31m_RemoteTraceback\u001b[0m                          Traceback (most recent call last)","\u001b[0;31m_RemoteTraceback\u001b[0m: \n\"\"\"\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py\", line 418, in _process_worker\n    r = call_item()\n  File \"/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py\", line 272, in __call__\n    return self.fn(*self.args, **self.kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\", line 608, in __call__\n    return self.func(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\", line 256, in __call__\n    for func, args, kwargs in self.items]\n  File \"/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\", line 256, in <listcomp>\n    for func, args, kwargs in self.items]\n  File \"/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py\", line 504, in _fit_and_score\n    estimator = estimator.set_params(**cloned_parameters)\n  File \"/usr/local/lib/python3.6/dist-packages/keras/wrappers/scikit_learn.py\", line 115, in set_params\n    self.check_params(params)\n  File \"/usr/local/lib/python3.6/dist-packages/keras/wrappers/scikit_learn.py\", line 91, in check_params\n    '{} is not a legal parameter'.format(params_name))\nValueError: activation is not a legal parameter\n\"\"\"","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-53-342d0eae302e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0macti\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdummy_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    708\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    709\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 710\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    711\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    712\u001b[0m         \u001b[0;31m# For multi-metric evaluation, store the best_index_, best_params_ and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params)\u001b[0m\n\u001b[1;32m    687\u001b[0m                                \u001b[0;32mfor\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m                                in product(candidate_params,\n\u001b[0;32m--> 689\u001b[0;31m                                           cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1017\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1018\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1019\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    907\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    908\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 909\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    910\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    560\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    561\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 562\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    563\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mLokyTimeoutError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    430\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mCancelledError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mFINISHED\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 432\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    433\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/concurrent/futures/_base.py\u001b[0m in \u001b[0;36m__get_result\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    382\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: activation is not a legal parameter"]}]},{"cell_type":"code","metadata":{"id":"u_0ERxCImLGc","colab_type":"code","colab":{}},"source":["class ClearTrainingOutput(tf.keras.callbacks.Callback):\n","  def on_train_end(*args, **kwargs):\n","    IPython.display.clear_output(wait = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oERFlh-Rpib1","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=100)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QF3tadhPpOI4","colab_type":"code","colab":{}},"source":["tuner.search(X_train, y_train, epochs = 10, validation_data = (X_test, y_test), callbacks = [ClearTrainingOutput()])\n","\n","# Get the optimal hyperparameters\n","best_hps = tuner.get_best_hyperparameters(num_trials = 1)[0]\n","\n","print(f\"\"\"\n","The hyperparameter search is complete. The optimal number of units in the first densely-connected\n","layer is {best_hps.get('units')} and the optimal learning rate for the optimizer\n","is {best_hps.get('learning_rate')}.\n","\"\"\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sElDwNRypN6F","colab_type":"code","colab":{}},"source":["# Build the model with the optimal hyperparameters and train it on the data\n","model = tuner.hypermodel.build(best_hps)\n","model.fit(X_train, y_train, epochs = 10, validation_data = (X_test, y_test))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wga2g7AcpTLU","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZLA8ZolvpS_-","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JWXySU92mGRI","colab_type":"text"},"source":["##### PREPARING SUBMISSION"]},{"cell_type":"code","metadata":{"id":"6kJ5c8XNF0ID","colab_type":"code","colab":{}},"source":["n_array = model.predict(X_test)\n","max_ind = pd.DataFrame(n_array)\n","\n","sample.iloc[:,-1] = max_ind.idxmax(axis=1) + 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TzWhqqUReGtl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"a7fc005c-9532-4bcb-948f-d22964fe6ba7","executionInfo":{"status":"ok","timestamp":1589736224622,"user_tz":-330,"elapsed":1428,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["sample['Surge_Pricing_Type'].unique()"],"execution_count":93,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3])"]},"metadata":{"tags":[]},"execution_count":93}]},{"cell_type":"code","metadata":{"id":"8p4IRnUXeJtT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"c8b421be-0021-412f-d2e0-2889b2f952fe","executionInfo":{"status":"ok","timestamp":1589736226303,"user_tz":-330,"elapsed":1237,"user":{"displayName":"Navin Mundhra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgniN_mTRS-2UfcIm1spNh0X1ccg_lMD19cKy8PTg=s64","userId":"04409829077952489554"}}},"source":["sample.isnull().sum()"],"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Trip_ID               0\n","Surge_Pricing_Type    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"code","metadata":{"id":"5ha4u6TqeS0u","colab_type":"code","colab":{}},"source":["sub_no = '06'\n","file_name = str('drive/My Drive/Colab Notebooks/proj_4 - mobility_analytics/sub_1-'+ sub_no +'.csv')\n","sample.to_csv(file_name, index=False)\n","# print(file_name)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oeB5-54CgfNJ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}